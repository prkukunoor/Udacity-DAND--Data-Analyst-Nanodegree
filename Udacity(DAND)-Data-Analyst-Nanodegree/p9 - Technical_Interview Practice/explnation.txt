Question 1:
In this function The angrm() function gives each alphabet a unique prime as hash code and calculates the hash number value for a string by multiplying the hash code of each letter in the string. angrm_s() compares the hash number of t to each substrings with same length of t in s. The for-loop for letter in list(string) has time complexity of O(m), and the for-loop for i in range(len(s) - len(t)) has time complexity of O(n). Thus the overall time complexity is O(m*n). The whole process only takes the space of a hash table of the alphabets and two hash numbers calculated, therefore the space complexity is O(1).
Question2:

The function works by checking first if "a" is a palindrome. If it is not a palindrome then it will loop through different combinations of "a" starting with the longest ones. For example, for the word "hello", since it is not a palindrome, it will loop through the letters of the words in the following manner.

Question 3:
In this Function I used Prim's algorithm to find the minimum spanning tree for the weighted undirected graph G. This starts with picking a node which in the case of the node above will pick node[0] and adding them to a visited list. Prim is a greedy algorithm which will choose the smallest edge that connects to an unvisited node which will then add this to the visited list until all the vertices are in the list. Given the data structure, the time complexity for this is O(VlogV + ElogV). As for space complexity, two new dictionaries are created for this function - G2 and the final result dictio. If space is an issue, we can replace G with the final output.

Question 4:
In this function instead of making a list of all the previous nodes, we can make a while loop that reassigns the root as long as both nodes are either higher or lower than the root. If this condition is no longer satisfied then that means that the new assigned root is the lowest common ancestor. 
Out of all three functions for question 4, 4c is the most efficient as it divides the tree into two every time by reassigning the root and only checking on either the left or the right. The big O notation for this would be the height of the tree which is O(log(n)).

Question 5:
In this function The solution first visits all the nodes and find the length of the linked list which takes O(n) time and O(n) space. Then it finds the position of mth to the last node in the linked list as (length - m).

#references 
#Stockoverflow.com
#https://www.gitbrowse.com/repos/nawns/ctci_v6
#https://en.wikipedia.org/wiki/Tree_(graph_theory)
#http://docs.python-guide.org/en/latest/writing/gotchas/
#udacity forums 
#github.com